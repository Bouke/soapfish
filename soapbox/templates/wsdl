################################################################################
# Note: This python module was generated by soapbox.wsdl2py
#       Try to avoid editing it if you might need to regenerate it.
################################################################################


from soapbox import soap, xsd
from soapbox.xsd import UNBOUNDED


################################################################################
# Schemas

{% if schema %}{{ schema }}{% endif -%}

{%- for service in definitions.services %}
{%- for port in service.ports %}

{%- set binding = get_by_name(definitions.bindings, port.binding) %}
{%- set XXX = binding.set_definition(definitions) %}
{%- set XXX = binding.feedback_Operations() %}

{%- if binding.binding.transport != SOAPTransport %}{% continue %}{% endif %}

{%- if is_server %}
{%- for operation in binding.operations -%}
{%- set XXX = operation.set_definition(definitions) -%}
{%- set inputMessage = operation.get_InputMessage() -%}
{%- set outputMessage = operation.get_OutputMessage() -%}
def {{ operation.name }}(request, {{ inputMessage.part.element|removens }}):
    # Put your implementation here.
    return {{ outputMessage.part.element|removens }}
{%- endfor %}
{%- endif %}
################################################################################
# Methods


{% for operation in binding.operations -%}
{%- set XXX = operation.set_definition(definitions) -%}
{%- set inputMessage = operation.get_InputMessage() -%}
{%- set outputMessage = operation.get_OutputMessage() -%}
{{ operation.name }}_method = xsd.Method(
    {%- if is_server %}function={{ operation.name }},{% endif %}
    soapAction='{{ operation.operation.soapAction }}',
    {%- if inputMessage.part.element %}
    input='{{ inputMessage.part.element|removens }}',
    inputPartName='{{ inputMessage.part.name }}',
    {%- else %}
    input={{ inputMessage.part.type|removens|class }},
    {%- endif %}
    {%- if inputMessage.part.element %}
    output='{{ outputMessage.part.element|removens }}',
    outputPartName='{{ outputMessage.part.name }}',
    {%- else %}
    input={{ outputMessage.part.type|removens|class }},
    {%- endif %}
    operationName='{{ operation.name }}',
    {%- if operation.operation.style %}
    style='{{ operation.operation.style }}',
    {%- endif %}
)


{% endfor -%}
################################################################################
# SOAP Service


{{ port.name }}_SERVICE = soap.Service(
    name='{{ port.name }}',
    targetNamespace='{{ definitions.targetNamespace }}',
    location='{{ port.address.location }}',
    schema=Schema_{{ schema_name(definitions.types.schema.targetNamespace) }},
    version=soap.SOAPVersion.SOAP11,
    methods=[{% for o in binding.operations %}{{ o.name }}_method{% if not loop.last %}, {% endif %}{% endfor %}],
)

{% if is_server %}
################################################################################
# Django Dispatch


# Uncomment these lines to turn on dispatching:
#from django.views.decorators.csrf import csrf_exempt
#dispatch = csrf_exempt(soap.get_django_dispatch({{ port.name }}_SERVICE))

# Put these lines in the urls.py file of your Django project/application:
#urlpatterns += patterns('',
#    (r'{{ service.ports.0.address.location|urlcontext }}', '<module>.dispatch'),
#)
{% else %}
################################################################################
# SOAP Service Stub


class {{ port.name }}ServiceStub(soap.Stub):
    '''
    '''
    SERVICE = {{ port.name }}_SERVICE
{% for operation in binding.operations %}
{%- set inputMessage = operation.get_InputMessage() %}
    def {{ operation.name }}(self, {{ inputMessage.part.element|removens }}):
        '''
        '''
        return self.call('{{ operation.name}}', {{ inputMessage.part.element|removens }})
{% endfor %}
{%- endif %}
{%- endfor %}{# ports #}
{%- endfor %}{# services #}

{# vim:set et ft=django nowrap sts=4 sw=4 ts=4: -#}
################################################################################
# vim:et:ft=python:nowrap:sts=4:sw=4:ts=4
